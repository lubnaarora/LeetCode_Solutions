You are given an m x n integer matrix matrix with the following two properties:
Each row is sorted in non-decreasing order.
The first integer of each row is greater than the last integer of the previous row.
Given an integer target, return true if target is in matrix or false otherwise.
You must write a solution in O(log(m * n)) time complexity.
 
Example 1:
 
Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
Output: true
Example 2:
 
Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13
Output: false
 
Constraints:
m == matrix.length
n == matrix[i].length
1 <= m, n <= 100
-104 <= matrix[i][j], target <= 104



Solution:

from typing import List

class Solution:
    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
        if not matrix or not matrix[0]:
            return False

        # Step 1: Binary Search on the First Column
        m, n = len(matrix), len(matrix[0])
        top, bottom = 0, m - 1
        candidateRow = -1

        while top <= bottom:
            mid = top + (bottom - top) // 2
            if matrix[mid][0] == target:
                return True
            elif matrix[mid][0] < target:
                top = mid + 1
                candidateRow = mid
            else:
                bottom = mid - 1

        # If the target is not found in the first column, return False
        if candidateRow == -1:
            return False

        # Step 2: Binary Search on the Candidate Row
        left, right = 0, n - 1

        while left <= right:
            mid = left + (right - left) // 2
            if matrix[candidateRow][mid] == target:
                return True
            elif matrix[candidateRow][mid] < target:
                left = mid + 1
            else:
                right = mid - 1

        # If the target is not found in the candidate row, return False
        return False



Memory Optimization:
from typing import List

class Solution:
    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
        if not matrix or not matrix[0]:
            return False

        # Step 1: Binary Search on the First Column
        m, n = len(matrix), len(matrix[0])
        top, bottom = 0, m - 1
        candidateRow = -1

        while top <= bottom:
            mid = top + (bottom - top) // 2
            if matrix[mid][0] == target:
                return True
            elif matrix[mid][0] < target:
                top = mid + 1
                candidateRow = mid
            else:
                bottom = mid - 1

        # If the target is not found in the first column, return False
        if candidateRow == -1:
            return False

        # Step 2: Binary Search on the Candidate Row
        left, right = 0, n - 1

        while left <= right:
            mid = left + (right - left) // 2
            if matrix[candidateRow][mid] == target:
                return True
            elif matrix[candidateRow][mid] < target:
                left = mid + 1
            else:
                right = mid - 1

        # If the target is not found in the candidate row, return False
        return False


Some other Approaches

Row-wise Binary:
class Solution:
    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
        if not matrix or not matrix[0]:
            return False

        m, n = len(matrix), len(matrix[0])

        # Perform binary search on each row
        for row in matrix:
            left, right = 0, n - 1

            while left <= right:
                mid = left + (right - left) // 2
                mid_val = row[mid]

                if mid_val == target:
                    return True
                elif mid_val < target:
                    left = mid + 1
                else:
                    right = mid - 1

        return False




Divide and Conquer
Runtime	45ms
Memory	16.87

class Solution:
    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
        if not matrix or not matrix[0]:
            return False

        def search_in_quadrant(top: int, left: int, bottom: int, right: int) -> bool:
            if top > bottom or left > right:
                return False

            mid_row = (top + bottom) // 2
            mid_col = (left + right) // 2
            mid_val = matrix[mid_row][mid_col]

            if mid_val == target:
                return True
            elif mid_val > target:
                return (
                    search_in_quadrant(top, left, mid_row - 1, right) or
                    search_in_quadrant(mid_row, left, bottom, mid_col - 1)
                )
            else:
                return (
                    search_in_quadrant(top, mid_col + 1, bottom, right) or
                    search_in_quadrant(mid_row + 1, left, bottom, mid_col)
                )

        m, n = len(matrix), len(matrix[0])
        return search_in_quadrant(0, 0, m - 1, n - 1)

By using the Divide and Conquer approach, the function efficiently reduces the search space by dividing the matrix into quadrants and recursively searching in the relevant quadrants, similar to a binary search. The time complexity of this approach is also O(log(m * n)), just like the Flattened Binary Search approach.



1.	Flattened Binary Search
Runtime	48ms
Memory	16.76 mb


1. Instead of doing 2 separate binary searches for the row and column, treat the 2d matrix as 1d sorted array and perform a single binary search on it
2. Map 2d index(i,j) to the 1d index , use the formula : index = i*n + j, where n is the number of columns
3. This approach reduces search space into single dimension and performs a single binary search on the entire matrix.

class Solution:
    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
        if not matrix or not matrix[0]:
            return False
        
        m, n = len(matrix), len(matrix[0])
        left, right = 0, m * n - 1
        
        while left <= right:
            mid = left + (right - left) // 2
            mid_val = matrix[mid // n][mid % n]
            
            if mid_val == target:
                return True
            elif mid_val < target:
                left = mid + 1
            else:
                right = mid - 1
        
        return False




 
















Initialize the search space


















